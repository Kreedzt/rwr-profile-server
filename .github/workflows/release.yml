# .github/workflows/release.yml
name: Release

on:
  release:
    types: [created]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    needs: ['create-release']
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            strip: x86_64-linux-musl-strip
          - build: stable-x86
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
            qemu: i386
          - build: stable-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
            qemu: qemu-aarch64
          - build: stable-arm-gnueabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabihf
            strip: arm-linux-musleabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabi
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabi
            strip: arm-linux-musleabi-strip
            qemu: qemu-arm
          - build: stable-powerpc64
            os: ubuntu-latest
            rust: stable
            target: powerpc64-unknown-linux-gnu
            strip: powerpc64-linux-gnu-strip
            qemu: qemu-ppc64
          - build: stable-s390x
            os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            strip: s390x-linux-gnu-strip
            qemu: qemu-s390x
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-latest
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: win32-msvc
            os: windows-latest
            rust: nightly
            target: i686-pc-windows-msvc

    name: Build release
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1 
      # Build static releases with PCRE2.
      PCRE2_SYS_STATIC: 1

    steps:
      - name: Checkout regpository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }}
          rustup component add rust-src
      
      - name: Install packages (Ubuntu)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends zsh xz-utils liblz4-tool musl-tools brotli zstd

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Run tests
        run: cargo test --target ${{ matrix.target }} --verbose

      - name: Use Cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        shell: bash
        run: |
          # In the past, new releases of 'cross' have broken CI. So for now, we
          # pin it. We also use their pre-compiled binary releases because cross
          # has over 100 dependencies and takes a bit to compile.
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release --features pcre2 ${{ env.TARGET_FLAGS }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/rwr-profile-server.exe"
          else
            bin="target/${{ matrix.target }}/release/rwr-profile-server"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip release binary (macos)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: strip "$BIN"
    
      - name: Strip release binary (cross)
        if: env.CARGO == 'cross'
        shell: bash
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.strip }}" \
            "/$BIN"

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=rwr-profile-server-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/{complete,doc}
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,LICENSE} "$ARCHIVE"/
          cp {DEPLOYMENT.md} "$ARCHIVE"/doc/

          - name: Build archive (Windows)
          shell: bash
          if: matrix.os == 'windows-latest'
          run: |
            7z a "$ARCHIVE.zip" "$ARCHIVE"
            certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
            echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV
    
      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV
    
      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "v$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  docker:
    name: Publish to Docker Hub
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: zhaozisong0/rwr-profile-server:latest, zhaozisong0/rwr-profile-server:${{ github.ref_name }}
  # publish-crate:
  #   name: Publish to crates.io
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #     - name: Publish
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
  #       run: cargo publish
# jobs:
#   release:
#     name: release ${{ matrix.target }}
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         target: [x86_64-pc-windows-gnu]
#     steps:
#       - uses: actions/checkout@master
#       - name: Compile and release
#         uses: rust-build/rust-build.action@latest
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           RUSTTARGET: ${{ matrix.target }}
#           EXTRA_FILES: "README.md LICENSE"
#           TOOLCHAIN_VERSION: "nightly"
